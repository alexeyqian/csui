@{
    ViewData["Title"] = "Home Page";
}

<style>
    .highchart-question-container {
        box-shadow: rgba(0, 0, 0, 0.1) 0.3px 0.9px, rgba(0, 0, 0, 0.13) 0px 1.6px 3.6px;
        background-color: rgb(255, 255, 255);
        margin: 2rem 0px;
    }

    .highchart-question-title {
        display: flex;
        align-content: flex-end;
        flex-direction: column-reverse;
        font-family: "Segoe UI";
        font-size: 14px;
        line-height: 20px;
        padding-left: 16px;
        padding-top: 16px;
        padding-bottom: 16px;
        font-weight: 600;
        color: rgb(50, 49, 48);
        border-bottom: 1px solid rgb(237, 235, 233);
    }

    .highchart-main-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        /*padding: 6rem 0px; // TODO: REMOVE */
        margin: 16px 0px; /*TODO: Added*/
    }

    .highchart-right-part {
        justify-content: left;
        font-family: "Segoe UI";
        font-size: 0.9em;
        max-height: 500px;
        display: flex;
        min-width: 480px;
        max-width: 600px;
        margin: auto 0px;
    }
</style>

<div class="row">
    <div class="col-md-3">
        <ul class="list-group">
            <li class="list-group-item">Home</li>
            <li class="list-group-item">All Projects</li>
            <li class="list-group-item">Periodic customer feedback</li>
            <li class="list-group-item">Survey 1</li>
            <li class="list-group-item active">Alexey DEV</li>
        </ul>
    </div>
    <div class="col-md-9">
        <div class="highchart-question-container">
            <div class="highchart-question-title">
                1. Choices Example One?
            </div>
            <div class="highchart-main-section">
                <div class="highchart-right-part">
                    <div id="barChart1"></div>
                </div>
            </div>
        </div>

        <div class="highchart-question-container">
            <div class="highchart-question-title">
                1. Choices Example Two?
            </div>
            <div class="highchart-main-section">
                <div class="highchart-right-part">
                    <div id="barChart2"></div>
                </div>
            </div>
        </div>

        <div class="highchart-question-container">
            <div class="highchart-question-title">
                1. Choices Example Three?
            </div>
            <div class="highchart-main-section">
                <div class="highchart-right-part">
                    <div id="barChart3"></div>
                </div>
            </div>
        </div>

        <div class="highchart-question-container">
            <div class="highchart-question-title">
                1. Choices Example Four?
            </div>
            <div class="highchart-main-section">
                <div class="highchart-right-part">
                    <div style="overflow-y: scroll; max-height: 500px;">
                        <div id="barChart4"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="highchart-question-container">
            <div class="highchart-question-title">
                1. Rating Example Star
            </div>
            <div class="highchart-main-section">
                <div class="highchart-right-part">
                    <div id="columnChartStar"></div>
                </div>
            </div>
        </div>

        <div class="highchart-question-container">
            <div class="highchart-question-title">
                1. Rating Example Number
            </div>
            <div class="highchart-main-section">
                <div class="highchart-right-part">
                    <div id="columnChartNumber"></div>
                </div>
            </div>
        </div>

        <div class="highchart-question-container">
            <div class="highchart-question-title">
                1. Rating Example Smiley
            </div>
            <div class="highchart-main-section">
                <div class="highchart-right-part">
                    <div id="columnChartSmiley"></div>
                </div>
            </div>
        </div>

        <div class="highchart-question-container">
            <div class="highchart-question-title">
                1. Gauge Example One?
            </div>
            <div class="highchart-main-section">
                <div class="highchart-right-part">
                    <div class="row">

                        <div id="gaugeArc"></div>

                        <div id="gaugeBar"></div>

                    </div>
                </div>
            </div>
        </div>

        <div class="highchart-question-container">
            <div class="highchart-question-title">
                1. Gauge Example Two?
            </div>
            <div class="highchart-main-section">
                <div class="highchart-right-part">
                    <div class="row">

                        <div id="gaugeArc2"></div>

                        <div id="gaugeBar2"></div>

                    </div>
                </div>
            </div>
        </div>

    </div>
</div>


@section Scripts{

    <script>
        var barObj = {};
        var columnObj = {};
        var gaugeArcObj = {};
        var gaugeBarObj = {};

        var barPlotOptions = {
            series: {
                states: {
                    inactive: {
                        opacity: 1
                    }
                }
            },

            bar: {
                stacking: 'normal',
                groupPadding: 0.1,
                pointPadding: 0,
                maxPointWidth: 41,
                //minPointWidth: 8,
                minPointLength: 30,
            },
        };

        var barTooltip = {
            followPointer: false,
            backgroundColor: "#00000",
            borderWidth: 0,
            style: {
                "fontFamily": "Segoe UI",
                "fontWeight": 400,
                "color": "#eee",
                "direction": "ltr",
            },
            formatter: function () {
                return '<div>' + this.x + ', <span>' + this.y + '%</span></div><br/><div>18 responses</div>';
            }
        };

        var columnPlotOptions = {
            series: {
                states: {
                    inactive: {
                        opacity: 1
                    }
                }
            },
            column: {
                stacking: 'normal',
                dataLabels: {
                    enabled: false
                }
            },
            followPointer: false,
            backgroundColor: "#00000",
            borderWidth: 0,
            style: {
                "fontFamily": "Segoe UI",
                "fontWeight": 400,
                "color": "#eee",
                "direction": "ltr",
            },
            formatter: function () {
                return '<div>' + this.x + ', <span>' + this.y + '%</span></div><br/><div>18 responses</div>';
            }
        };

        var columnTooltip = {
            followPointer: false,
            backgroundColor: "#00000",
            borderWidth: 0,
            style: {
                "fontFamily": "Segoe UI",
                "fontWeight": 400,
                "color": "#eee",
                "direction": "ltr",
            },
            formatter: function () {
                return '<div>' + this.x + ', <span>' + this.y + '%</span></div><br/><div>18 responses</div>';
            }
        };

        var gaugeArcTooltip = {
            followPointer: false,
            backgroundColor: "#00000",
            borderWidth: 0,
            style: {
                "fontFamily": "Segoe UI",
                "fontWeight": 400,
                "color": "#eee",
                "direction": "ltr",
            },
            formatter: function () {
                return '<div>Score - <span>' + this.y + '</span></div><br/><div>18 responses</div>';
            }
        };

        var gaugeBarTooltip = {
            followPointer: false,
            backgroundColor: "#00000",
            borderWidth: 0,
            style: {
                "fontFamily": "Segoe UI",
                "fontWeight": 400,
                "color": "#eee",
                "direction": "ltr",
            },
            formatter: function () {
                return '<div>' + this.x + ' <span>' + this.y + '%</span></div><br/><div>18 responses</div>';
            }
        };

        function createBarChart(obj) {
            // TODO: move to constants file
            // Below code is to set bar height and chart height dynamiclly
            // The reason not to use built-in minPointHeight is that chart.height, bar height scale
            // and chart.series.minPointHeight cannot take effect together.
            const barMinHeight = 8;
            const barMaxHeight = 40;
            const chartMaxHeight = 400;
            const barNumberThreshold = 15;

            // if categories under threshold, the chart height and bar height will be dynamically scale up and down.
            // after threshold, we set the bar height to min height, and chart height accordingly.

            var height = 0;
            if (obj.categories.length > barNumberThreshold) {
                barPlotOptions.series.pointWidth = barMinHeight;
                height = obj.categories.length * barMinHeight * 2;
            } else {
                height = obj.categories.length * barMaxHeight * 2;
                height = height >= chartMaxHeight ? chartMaxHeight : height;
            }

            Highcharts.chart(obj.container, {
                chart: {
                    type: 'bar',
                    height: height,
                },

                title: {
                    text: ''
                },

                legend: {
                    enabled: false,
                },

                xAxis: {
                    categories: obj.categories,
                    labels: {
                        align: 'right',
                    },
                    lineWidth: 0,
                },

                yAxis: {
                    min: 0,
                    max: 100,
                    title: {
                        enabled: false,
                    },
                    labels: {
                        format: '{value}%'
                    },
                    gridLineDashStyle: 'ShortDash',

                },

                series: [{
                    name: 'null',
                    data: obj.dataForBackground,
                    color: '#F2F3F5',
                    enableMouseTracking: false
                }, {
                    data: obj.data,
                    color: '#7084E3',
                }],

                tooltip: barTooltip,
                plotOptions: barPlotOptions,
                credits: {
                    enabled: false
                },
                scrollbar: {
                    enabled: true
                }
            });
        }

        function createColumnChart(obj) {
            console.log(obj);
            let chartMaxHeight = 400;
            let chartHeightRatio = 80;

            //var height = obj.categories.length * chartHeightRatio;
            //height = height >= chartMaxHeight ? chartMaxHeight : height;

            Highcharts.chart(obj.container, {
                chart: {
                    type: 'column',
                    //height: height
                },

                title: {
                    text: ''
                },

                legend: {
                    enabled: false,
                },

                xAxis: {
                    categories: obj.categories,
                    labels: {
                        align: 'center',
                    },
                    lineWidth: 0
                },

                yAxis: {
                    min: 0,
                    max: 100,
                    title: {
                        enabled: false,
                    },
                    labels: {
                        format: '{value}%'
                    },
                    gridLineDashStyle: 'ShortDash',
                },

                series: [{
                    name: 'null',
                    data: obj.dataForBackground,
                    color: '#F2F3F5',
                    enableMouseTracking: false
                }, {
                    data: obj.data,
                    color: '#7084E3',
                }],

                tooltip: columnTooltip,
                plotOptions: columnPlotOptions,
                credits: {
                    enabled: false
                }
            });
        }

        function createGaugeArc(obj) {
            let color = obj.y >= 50 ? '#107C10' : '#BA141A';

            Highcharts.chart(obj.container, {
                chart: {
                    type: 'gauge',
                    title: {
                        text: ''
                    },
                    plotBackgroundImage: null,
                    height: 250
                },
                title: {
                    text: ''
                },
                pane: [{
                    startAngle: -90,
                    endAngle: 90,
                    background: null,
                    //center: ['50%', '100%'],
                    //size: 300
                }],

                yAxis: [{
                    min: 0,
                    max: 100,
                    minorTickLength: 0,
                    tickLength: 0,
                    tickWidth: 0,
                    labels: {
                        enabled: true,
                        y: 20,
                        formatter: function () {
                            if (this.isLast || this.isFirst) {
                                return this.value
                            }
                        }
                    },
                    title: {
                        text: '<div class="gaugeFooter" style="text-align: center;"><h3>' + obj.y + '</h3><div>Avg NPS score</div></div>',
                        useHTML: true,
                        y: 70 // offset of the text
                    },
                    plotBands: [{
                        from: 0,
                        to: obj.y,
                        color: color,
                        innerRadius: '100%',
                        outerRadius: '50%'
                    }, {
                        from: obj.y,
                        to: 100,
                        color: '#F2F3F5',
                        innerRadius: '100%',
                        outerRadius: '50%'
                    }],
                    pane: 0,

                }],

                tooltip: gaugeArcTooltip,

                plotOptions: {
                    gauge: {
                        dataLabels: {
                            enabled: false
                        },
                        dial: {
                            radius: '100%',
                            backgroundColor: 'black',
                            borderColor: 'black',
                            borderWidth: 1,
                            baseWidth: 10,
                            topWidth: 1,
                            baseLength: '0%', // of radius
                            rearLength: '0%',
                        }
                    }
                },
                series: [{
                    data: [obj.y],
                    yAxis: 0,
                    lables: {
                        enabled: false
                    }
                }],
                credits: {
                    enabled: false
                }

            });
        }

        function createGaugeBar(obj) {
            Highcharts.chart(obj.container, {
                chart: {
                    type: 'bar',
                    height: 200
                },
                title: {
                    text: 'Overal NPS results',
                    align: 'left'
                },
                xAxis: {
                    categories: ['NPS'],
                    labels: {
                        enabled: false
                    },
                    gridLineWidth: 0,
                    visible: false,
                },
                yAxis: {
                    min: 0,
                    max: 100,
                    labels: {
                        enabled: false
                    },
                    gridLineWidth: 0,
                    visible: false,
                },
                tooltip: gaugeBarTooltip,
                legend: {
                    symbolHeight: 12,
                    symbolWidth: 12,
                    symbolRadius: 0
                },
                plotOptions: {
                    series: {
                        stacking: 'normal'
                    },
                    bar: {
                        dataLabels: {
                            enabled: true,
                            format: '{y} %',
                            style: {
                                fontWeight: 'bold'
                            }
                        },
                    }
                },

                series: [{
                    name: 'Promoters(9-10)',
                    data: [obj.data[0]],
                    color: "#107C10"
                }, {
                    name: 'Passives(7-8)',
                    data: [obj.data[1]],
                    color: "#EF5F20",
                },
                {
                    name: 'Detractors(0-6)',
                    data: [obj.data[2]],
                    color: "#D13438",
                }], credits: {
                    enabled: false
                }
            });

        }
    </script>

    <script>
        barObj.container = 'barChart1';
        barObj.data = Array.from({ length: 2 }, () => Math.floor(Math.random() * 100));
        barObj.dataForBackground = Array(barObj.data.length).fill(100);
        barObj.categories = ['Option 1', 'Option right aligned'];
        createBarChart(barObj);
    </script>

    <script>
        barObj.container = 'barChart2';
        barObj.data = Array.from({ length: 7 }, () => Math.floor(Math.random() * 100));
        barObj.dataForBackground = Array(barObj.data.length).fill(100);
        barObj.categories = ['Option 1', 'A Option 2', 'C Option 3', 'B Option 4', 'Option 5', 'Option 6', 'Option right aligned'];
        createBarChart(barObj);
    </script>

    <script>
        barObj.container = 'barChart3';
        barObj.data = Array.from({ length: 15 }, () => Math.floor(Math.random() * 100));
        barObj.dataForBackground = Array(barObj.data.length).fill(100);
        barObj.categories = ['Option 1', 'Option 2', 'Option 3', 'Option 4', 'Option 5', 'Option 6',
            'Option 7', 'Option 8', 'Option 9', 'Option 10', 'Option 11', 'Option 12', 'Option 13', 'Option 14', 'Option right aligned'];
        createBarChart(barObj);
    </script>

    <script>
        barObj.container = 'barChart4';
        barObj.data = Array.from({ length: 35 }, () => Math.floor(Math.random() * 100));
        barObj.dataForBackground = Array(barObj.data.length).fill(100);
        barObj.categories = Array.from({ length: 35 }, (v, i) => 'Option ' + i);
        barObj.height = 900;
        createBarChart(barObj);
    </script>

    <script>
        columnObj.container = 'columnChartStar';
        columnObj.data = Array.from({ length: 5 }, () => Math.floor(Math.random() * 100));
        columnObj.dataForBackground = Array(columnObj.data.length).fill(100);
        columnObj.categories = ['1 star', '2 start', '3 start', '4 start', '5 start'];
        columnObj.subType = 'star';
        createColumnChart(columnObj);
    </script>

    <script>
        columnObj.container = 'columnChartNumber';
        columnObj.data = Array.from({ length: 5 }, () => Math.floor(Math.random() * 100));
        columnObj.dataForBackground = Array(columnObj.data.length).fill(100);
        columnObj.categories = ['1', '2', '3', '4', '5'];
        columnObj.subType = 'number';
        createColumnChart(columnObj);
    </script>

    <script>
        columnObj.container = 'columnChartSmiley';
        columnObj.data = Array.from({ length: 5 }, () => Math.floor(Math.random() * 100));
        columnObj.dataForBackground = Array(columnObj.data.length).fill(100);
        columnObj.categories = ['1', '2', '3', '4', '5'];
        columnObj.subType = 'smiley';
        createColumnChart(columnObj);
    </script>

    <script>
        gaugeArcObj.container = 'gaugeArc';
        gaugeArcObj.y = 80;
        createGaugeArc(gaugeArcObj);

        gaugeBarObj.container = 'gaugeBar';
        gaugeBarObj.data = [60, 16, 24];
        createGaugeBar(gaugeBarObj);
    </script>

    <script>

        gaugeArcObj.container = 'gaugeArc2';
        gaugeArcObj.y = 30;
        createGaugeArc(gaugeArcObj);

        gaugeBarObj.container = 'gaugeBar2';
        gaugeBarObj.data = [24, 16, 60];
        createGaugeBar(gaugeBarObj);

    </script>

}
